def share_diagonal(x0, y0, x1, y1):
    """ Is (x0, y0) on a shared diagonal with (x1, y1)? """
    dy = abs(y1 - y0)  # Calc the absolute y distance
    dx = abs(x1 - x0)  # CXalc the absolute x distance
    return dx == dy  # They clash if dx == dy


def col_clashes(bs, c):
    """ Return True if the queen at column c clashes
         with any queen to its left.
    """
    for i in range(c):  # Look at all columns to the left of c
        if share_diagonal(i, bs[i], c, bs[c]):
            return True

    return False  # No clashes - col c has a safe placement.


def has_clashes(the_board):
    """ Determine whether we have any queens clashing on the diagonals.
        We're assuming here that the_board is a permutation of column
        numbers, so we're not explicitly checking row or column clashes.
    """
    for col in range(1, len(the_board)):
        if col_clashes(the_board, col):
            return True
    return False


def find_solution(n, ref):
    import random
    import time
    from numpy import mean
    rng = random.Random()  # Instantiate a generator
    bd = list(range(n))  # Generate the initial permutation
    num_found = 0
    tries = 0
    tempo = []
    tempo_1 = time.time()
    if ref == 1:
        k = 10
    else:
        k = 3
    while num_found < k:
        rng.shuffle(bd)
        tries += 1
        if not has_clashes(bd):
            if ref == 1:
                print("Para o tabuleileiro de tamanho {0} encontramos a seguinte resposta {1} em {2} tentativas.".format(n,
                                                                                                                     bd,
                                                                                                                     tries))
            tempo_2 = time.time()
            tempo.append(tempo_2 - tempo_1)
            tempo_1 = tempo_2
            tries = 0
            num_found += 1
    return mean(tempo)

def main():
    #find_solution(4, 1)
    #find_solution(12, 1)
    #find_solution(16, 1)
    n = 12
    tempo = 0
    while tempo < 60:
        tempo = find_solution(n, 2)
        print(n)
        print(tempo)
        n += 1
    print("O maior tamanho de tabuleiro que conseguimos calcular em um minuto é {0}".format(n-2))
main()


# O maior tabuleiro que consegui calcular com esse codigo foi em média de 17.